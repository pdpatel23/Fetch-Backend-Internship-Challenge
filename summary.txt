1. Why did you choose the tools, libraries, and language you used for the coding exercise?

I used Python and Flask because I had the most experience using them. Pythonâ€™s simplicity and readability allow for faster 
implementation. Flask was used because of its lightweight and minimalistic framework, making it suitable for the project's scope. 
Flask provides essential RESTful features like routing, request handling, and built-in JSON support. Using Python and Flask helped 
me focus on the core logic of the application without dealing with the complexities of a more extensive framework. 


2. What are the advantages and disadvantages of your solution?

Some of the advantages of the solution include the way the code is structured into separate functions for each endpoint which improves
readability and maintainability. The implementation efficiently handles point transactions by maintaining a list of transactions and a dictionary for 
payer balances, allowing for quick access and updates. Additionally, each endpoint operates independently, which makes it easier for developers to understand, 
modify, and extend each endpoint without affecting the functionality of other endpoints. This also simplifies debugging and maintenance by being able to isolate the problems. 
The solution also uses appropriate HTTP methods like POST for adding and spending points and GET for fetching balance, while returning correct status codes. 

Some of the disadvantages include a lack of data persistence. All the transactions of a user would be lost if the service restarts because of no database integration. The 
implementation also assumes that the input data will always be in the correct format which could potentially lead to crashes or unexpected behavior when invalid data is received. 
Additionally, a comprehensive set of tests need to be developed to verify the functionality and reliability of the API.


3. What has been a favorite school/personal project thus far? What about it that challenged you?

One of my favorite projects that I worked on was WeatherWatch, a weather web application. This web app used real-time weather data and alerts while also addressing 
an important aspect of mental health: the impact of seasonal changes on mood. A mental health feature was incorporated into the application to provide users with 
uplifting messages based on the day's weather. The application was built using React for the frontend and Python with Flask for the backend, allowing for efficient 
data processing and seamless API integration to retrieve weather information. As this was one of my first experiences developing a web application and working with APIs, 
I encountered a significant learning curve. I used a combination of online courses and documentation to complete this project successfully. 

One of the biggest challenges I faced was integrating the API to gather weather data and effectively parsing the data returned by the API. The raw data from the API often came in complex
JSON formats, which required careful handling to extract the specific information needed for my application. Additionally, I found it difficult to decide how to separate the functions so 
that the frontend could easily request hourly, daily, alerts, and weather descriptions. I realized the importance of creating functions tailored to specific tasks, enabling the frontend 
to seamlessly call the appropriate Flask route for the necessary information. This structured approach not only streamlined the code but also improved the overall efficiency of the application.
